#!/usr/bin/env roseus

(load "package://drc_task_common/euslisp/vehicle/vehicle-executive-utils.l")

(ros::roseus-add-msgs "drc_com_common")
(ros::roseus "vehicle_ocs_executive")

(setq *latest-handle-cmd* nil)
(setq *latest-accel-cmd* nil)
(setq *initialize-service-server* (instance empty-service-server :init "/ocs/drive/controller/initialize"))
(setq *grasp-service-server* (instance empty-service-server :init "/ocs/drive/controller/grasp"))
(setq *release-service-server* (instance empty-service-server :init "/ocs/drive/controller/release"))
(setq *correct-service-server* (instance empty-service-server :init "/ocs/drive/controller/correct"))
(setq *resume-service-server* (instance empty-service-server :init "/ocs/drive/controller/resume"))
(setq *approach-handle-service-server* (instance empty-service-server :init "/ocs/drive/controller/approach_handle"))
(setq *approach-accel-service-server* (instance empty-service-server :init "/ocs/drive/controller/approach_accel"))
(setq *reach-arm-service-server* (instance empty-service-server :init "/ocs/drive/controller/reach_arm"))
(setq *reach-leg-service-server* (instance empty-service-server :init "/ocs/drive/controller/reach_leg"))

(defun handle-cmd-callback (msg)
  (setq *latest-handle-cmd* (send msg :data))
  )
(defun accel-cmd-callback (msg)
  (setq *latest-accel-cmd* (send msg :data))
  )

(defun fc-message-callback (msg)
  (let (tmp-msg)
    (setq tmp-msg (make-msg-from-tunnel msg :goal_handle_angle std_msgs::Float32))
    (ros::publish "/ocs/drive/controller/goal_handle_angle" tmp-msg)
    (setq tmp-msg (make-msg-from-tunnel msg :estimated_handle_angle std_msgs::Float32))
    (ros::publish "/ocs/drive/controller/estimated_handle_angle" tmp-msg)
    (setq tmp-msg (make-msg-from-tunnel msg :step std_msgs::Float32))
    (ros::publish "/ocs/drive/controller/step" tmp-msg)
    (setq tmp-msg (make-msg-from-tunnel msg :min_step std_msgs::Float32))
    (ros::publish "/ocs/drive/controller/min_step" tmp-msg)
    (setq tmp-msg (make-msg-from-tunnel msg :max_step std_msgs::Float32))
    (ros::publish "/ocs/drive/controller/max_step" tmp-msg)
    (setq tmp-msg (make-msg-from-tunnel msg :handle_mode std_msgs::String
                                        :convert #'convert-uint8-to-mode
                                        )
          )
    (ros::publish "/ocs/drive/controller/handle_mode" tmp-msg)
    (setq tmp-msg (make-msg-from-tunnel msg :accel_mode std_msgs::String
                                        :convert #'convert-uint8-to-mode
                                        )
          )
    (ros::publish "/ocs/drive/controller/accel_mode" tmp-msg)

    (send *initialize-service-server* :receive (send msg :initialize_response))
    (send *grasp-service-server* :receive (send msg :grasp_response))
    (send *release-service-server* :receive (send msg :release_response))
    (send *correct-service-server* :receive (send msg :correct_response))
    (send *resume-service-server* :receive (send msg :resume_response))
    (send *approach-handle-service-server* :receive (send msg :approach_handle_response))
    (send *approach-accel-service-server* :receive (send msg :approach_accel_response))
    (send *reach-arm-service-server* :receive (send msg :reach_arm_response))
    (send *reach-leg-service-server* :receive (send msg :reach_leg_response))
    )
  )

(defun main-spin-once ()
  (let ((msg (instance drc_com_common::VehicleOCS2FCSmall :init)))
    (when *latest-handle-cmd*
      (send msg :handle_cmd *latest-handle-cmd*)
      )
    (when *latest-accel-cmd*
      (send msg :accel_cmd *latest-accel-cmd*)
      )
    (send msg :initialize_request (send *initialize-service-server* :request))
    (send msg :grasp_request (send *grasp-service-server* :request))
    (send msg :release_request (send *release-service-server* :request))
    (send msg :correct_request (send *correct-service-server* :request))
    (send msg :resume_request (send *resume-service-server* :request))
    (send msg :approach_handle_request (send *approach-handle-service-server* :request))
    (send msg :approach_accel_request (send *approach-accel-service-server* :request))
    (send msg :reach_arm_request (send *reach-arm-service-server* :request))
    (send msg :reach_leg_request (send *reach-leg-service-server* :request))
    (ros::publish "/ocs_to_fc_vehicle/input" msg)
    )
  )

;; for ueda tunnel
(ros::advertise "/ocs_to_fc_vehicle/input" drc_com_common::VehicleOCS2FCSmall)
(ros::subscribe "/ocs_from_fc_vehicle/output" drc_com_common::VehicleFC2OCSSmall #'fc-message-callback)

;; message from operation interface (drive/operation)
(ros::subscribe "/ocs/drive/operation/handle_cmd" std_msgs::Float64 #'handle-cmd-callback)
(ros::subscribe "/ocs/drive/operation/accel_cmd" std_msgs::Float64 #'accel-cmd-callback)

;; message to vehicle_ui
(ros::advertise "/ocs/drive/controller/goal_handle_angle" std_msgs::Float32 1)
(ros::advertise "/ocs/drive/controller/estimated_handle_angle" std_msgs::Float32 1)
(ros::advertise "/ocs/drive/controller/step" std_msgs::Float32 1)
(ros::advertise "/ocs/drive/controller/min_step" std_msgs::Float32 1)
(ros::advertise "/ocs/drive/controller/max_step" std_msgs::Float32 1)
(ros::advertise "/ocs/drive/controller/handle_mode" std_msgs::String 1)
(ros::advertise "/ocs/drive/controller/accel_mode" std_msgs::String 1)

(ros::advertise-service "/ocs/drive/controller/initialize" std_srvs::Empty #'send *initialize-service-server* :callback)
(ros::advertise-service "/ocs/drive/controller/grasp" std_srvs::Empty #'send *grasp-service-server* :callback)
(ros::advertise-service "/ocs/drive/controller/release" std_srvs::Empty #'send *release-service-server* :callback)
(ros::advertise-service "/ocs/drive/controller/correct" std_srvs::Empty #'send *correct-service-server* :callback)
(ros::advertise-service "/ocs/drive/controller/resume" std_srvs::Empty #'send *resume-service-server* :callback)
(ros::advertise-service "/ocs/drive/controller/approach_handle" std_srvs::Empty #'send *approach-handle-service-server* :callback)
(ros::advertise-service "/ocs/drive/controller/approach_accel" std_srvs::Empty #'send *approach-accel-service-server* :callback)
(ros::advertise-service "/ocs/drive/controller/reach_arm" std_srvs::Empty #'send *reach-arm-service-server* :callback)
(ros::advertise-service "/ocs/drive/controller/reach_leg" std_srvs::Empty #'send *reach-leg-service-server* :callback)

(ros::rate 10)
(while (ros::ok)
  (ros::spin-once)
  (main-spin-once)
  (ros::sleep))
